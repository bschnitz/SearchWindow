*SearchWindow.txt*     SearchWindow, a tool for searching patterns in files
*SearchWindow* *search-window* *search_window* *searchwindow* *swin*

                              SearchWindow Manual

================================================================================
CONTENTS

    1. About SearchWindow                              |swin-about|
    2. Quick Start                                     |swin-quickstart|
        1. Quick Start
        2. How to move on                              |swin-roadmap|
    3. Conventions About Terms                         |swin-conventions|
    4. Usage                                           |swin-usage|
    5. Configuration                                   |swin-configuration|
        1. Functions                                   |swin-functions|
        2. Variables                                   |swin-variables|
    6. Advanced Usage                                  |swin-advanced-usage|
    7. Credits and License                             |swin-credits|
    8. Changelog                                       |swin-changelog|
    9. Contact                                         |swin-contact|

================================================================================
1. ABOUT SEARCH WINDOW                                              *swin-about*

SearchWindow may provide you with the facility of finding patterns in files ...

... it may also find other things, if you configure it appropriatly.

Highlights:
  - configurable search command
  - on demand window for showing the list of matches
  - possibility to jump to matches from the list of matches
  - highlighting of matches

================================================================================
2.1 QUICK START                                                *swin-quickstart*

1. Put the following into your .vimrc
>
   " create a search window instance, '<F9>' will give you a search prompt
   SearchWindow#Examples#CreateBasicSearch('<F9>')

2. move to a directory containing files to search for a pattern and open a new
   instance of vim there

3. pressing <F9> will give you the following prompt: ':SearchWindow -i ', enter
   a search pattern (standard 'grep' search pattern) and hit return

Upon completion of these steps, a new window, displaying a list with the search
results, ordered by file and order of appearance, will be show at the bottom of.
the screen. It has focus and allows you to jump to matches by moving the cursor
on a match and pressing <space>.

2.2 HOW TO MOVE ON                                                *swin-roadmap*

If you want more should probalby read the Usage section first (swin-usage) to
get an idea, of how the plugin is supposed to be used and configured basically.
This might be enough for your needs and for everything else you might consult
the Configuration section (swin-configuration) to know what switches can be used
to configure it to work as you want it to work. However, if that is not enough
for you and you want to make fundamental changes to the plugin, to what it does
and how, and get more control over it, then you probably want to read the
Advanced Usage (swin-advanced-usage) section.

Of course you should also read the "Conventions About Terms" section ...

================================================================================
3. CONVENTIONS ABOUT TERMS                                    *swin-conventions*

SearchWindow   - the name of the plugin or the SearchWindow class
search window  - an actual SearchWindow instance or the window displaying a list
                 of search results, created by the search window
*result-window*
result window  - the window in which a file, containing one or more matches, was
                 loaded; this should be the window, which was active, before the
                 search window was opened

================================================================================
4. USAGE                                                            *swin-usage*

For searching, using the SearchWindow plugin, an instance of the SearchWindow
class must be created (and configured). This can be done using the following
command:
>
    let swin = |SearchWindow#CreateNewInstance|()

A reference to every search window created will also be managed by the Plugin
itself. This might be useful for mappings, as one does not need to care about
the lifetime or scope of the variable set above. Every search window has an id
(swin.id), by which it can be identified. A search window instance can always
be requested from the SearchWindow plugin by calling
|SearchWindow#GetInstance(id)|.

When a search window is created, there exists yet no mapping for searching and
opening results. Searching however can be done using the
|swin.Search(arguments,...)| function:
>
    call swin.Search( {'%(pattern)' : 'swin'}, 0, 1 )

This searches for swin under the current working directory. (Hit <control-c>,
if the search takes to long, to abort it.) The other arguments tell the search
window to open directly a window displaying a list of results and to jump to
that window. If you do not want to seach under the current working directory,
you have to tell SearchWindow so. This can be done by specifying the root path
of the search, either locally to a search, by providing a value for
'%(searchpath)' or globally (to one search window object) by setting
|swin.arguments|['%(searchpath)'] .

However typing this every search is tedious. A custom Search function will help.
One was already written and can be found in SearchWindow/Examples.vim in the
SearchWindow Plugin's autoload path. The search window must be configured to use
it:
>
    let swin.SearchWindow = function("SearchWindow#Examples#Search")

Now one can write:
>
    call swin.SearchWindow( '<flags> <pattern>' )
  
to search for a pattern. <flags> is optional; if existing, it will be provided
as additional argument to grep. Note that the function will not detect, if there
several whitespace seperated flags, it will simply take the first word, if there
are more than two words, as flags. Look at the example code, it is well
commented, to see, how you might adapt it to your needs.

Yet, this is not an optimal configuration. The function is nice, a custom
command would be better. To create such a command, first a script local function
(it might be as well global, if you like it) is needed:
>
    func! s:SearchWindow(swin_id, args)
      call SearchWindow#GetInstance(a:swin_id).SearchWindow(a:args)
    endfunc

This function can be used to create a command and a mapping, for example:
>
    exe 'command -nargs=* SearchWindow call '
          \'<SID>SearchWindow('.swin.id.',''<args>'')'
    nnoremap <F9> q:iSearchWindow -i '

Note, how we do not need to care about the lifetime of swin, or if its a local
or global variable, for this mapping. The id of the search window is inseparably
incorporated into the command definition and can always be used to determine the
actual instance of the SearchWindow class.

There are some configuration examples in the SearchWindow/Examples.vim file
under the autoload directory, which might be useful either for understanding or
for actual use or as a base for own configurations.

================================================================================
5. CONFIGURATION                                            *swin-configuration*

5.1 Functions                                                   *swin-functions*

This sections lists all functions of the SearchWindow class and the Plugin,
which might be of interest for a user of this plugin.

There are other functions which might be interesting for advanced scripting
purposes, which are not mentioned here.

There are also some functions in the SearchWindow/Examples.vim file under the
autoload directory, which might be useful, which are not listed here.

For this section, let swin be an instance of the SearchWindow class.

    *SearchWindow#CreateNewInstance()* 
    returns a new instance of the SearchWindow class with default configuration

    *SearchWindow#GetInstance(id)*
    every search window has a unique id by which it can be found

    *swin.SetResultsFile()*
    set the path to the file which shall store the list of results

    *swin.OpenSearchResult()*
    if inside the search window and on a result, open it in the result window

    *swin.OnLoadSearchWindowBuffer()*
    this function will be executed when the search window was (re)loaded

    *swin.OnLoadResultsWindowBuffer()*
    this function will be executed when the results window loaded another file

    *swin.ReloadSearchWindow(...)*
    reload the search window buffer
    Argument:
    stay - defaults to 1, 0 means, that the focus is automatically moved to
           the search window)

    *swin.Search(arguments,...)*
    start the search
    Arguments:
    arguments          - arguments, which override |swin.arguments|
    stay               - if 0, move the focus to the search window (optional,
                         defaults to 1)
    open_search_window - if 1, open the search window (optional, defaults to 0)

    *swin.GoToSearchWindow()*
    move the focus to the search window (if it is open)

    *swin.OpenSearchWindow(...)*
    splits the window and opens the search window
    Arguments:
    stay - if 0, move the focus to the search window (optional, defaults to 1)


5.2 Variables                                                   *swin-variables*

There are some basic configuration variables which can be used to configure the
search window. Other variables should be considered private and left untouched.
The variables are listed with their default values.

For this section, let swin be an instance of the SearchWindow class.

    *swin.splitmodus* = 'botright'
    modifiers for the split command issued, when opening the search window

    *swin.cmd* =
        \'find %(findargs) %(searchpath) %(findexpression) -print0 | sort |'.
        \'xargs -0 grep -Hn %(grepargs) %(pattern) > %(resultsfile)'
    the command which is used for searching for matches. see |swin.arguments|.
    If you want to chage the command, keep in mind, that the '%(searchpath)'
    argument for the Search command will be internally used to get the
    absolute path of the search results (so either make sure, that your
    command only outputs absolute pathes, ore used the '%(searchpath)'
    argument; see also |swin-advanced-usage|).

    *swin.arguments* = {
    \  '%(findargs)'       : '',
    \  '%(searchpath)'     : '.',
    \  '%(findexpression)' : '',
    \  '%(grepargs)'       : '',
    \  '%(resultsfile)'    : 'SearchWindowResults',
    \  '%(pattern)'        : ''
    \}
    these arguments are inserted into the placeholders in |swin.cmd|. they are
    overruled by the arguments given to |swin.Search(arguments,...)|.
    swin.arguments['%(resultsfile)'] should not be set manually. Use
    |swin.SetResultsFile()| instead. note, that pattern is used to highlight
    matches using the |matchadd()| function of vim and to search using grep.
    this only works both at a time, if the given pattern can be used for both,
    GNU grep and |matchadd()||.

    *self.hi_group_matchline* = 'WildMenu'
    highlight group to use for highlighting lines in a file, which contain
    matches. set it to '' to disable this highlighting.

    *self.hi_group_match* = 'Search'
    highlight group to use for highlighting matches in a file. set it to '' to
    disable this highlighting.

    *self.key_open_result* = '<space>'
    key which is mapped to |swin.OpenSearchResult()| locally to the search window
    buffer on the opening of the search window.

    *self.filetype* = 'autodetec'
    the filetype of the search window is set to this. if it equals 'autodetect',
    the filetype will be set to the filetype of the first file found containing
    matches.

================================================================================
6. ADVANCED USAGE                                          *swin-advanced-usage*

For the case that you want to change the basic way this plugin is working, for
example to create a different way of searching, or if you just want to get the
most out of it, this section shall provide you with the necessary details.

First of all, the command for searching (|swin.cmd|) can be completely exchanged
by a different command. However, you have to take in mind, that the plugin
internally reads arguments['%(resultsfile)'] when searching, to determine, which
file the results of the search are written to. And you must take in mind that
there is an internal function 'swin.FormatGrepOutput' which formats the contents
of that file, such that it has a specific structure, which is necessary for
|swin.OpenSearchResult()| to work. For this function to be able to format the
output, each output line must have the form <linenr>:<filepath>:<match>. So, if
it has not that form, you might have to exchange these functions. (In the
|Usage| section, there is an example on how to set/exchange a function of a
search window object.)

Then you might want to overwrite the |swin.OnLoadSearchWindowBuffer()| and
|swin.OnLoadResultsWindowBuffer()| functions to let them operate differently
on the opened files.

Have a look at the SearchWindow.vim source file, it is well documented, to see
what the mentioned functions do and how you could replace them.

If you have some exciting configurations, send them to me (see |swin-contact|),
and I may include them as examples or extensions. Also contact me, if you have
question, I might be able to help you.

================================================================================
7. CREDITS AND LICENSE                             *swin-license* *swin-credits*

Developed by Benjamin Schnitzler <github.com/bschnitz>.

The plugin is published unter the GNU General Public License Version 3 (GPL v3).

================================================================================
8. CHANGELOG                                                    *swin-changelog*

First public release: 2015/06/09~

================================================================================
9. CONTACT                                                        *swin-contact*

E-mail to <benjamin.schnitzler+searchwindow@googlemail.com> .
